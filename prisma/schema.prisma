// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum AccountRole {
  Client
  Injured_Party
  Witness
  Defendant
  Hospital
  Treating_Facility
  Passenger
  Auto_Insurance_Company
  Health_Insurance_Company
}

enum WereYouInjured {
  Yes // Yes, I was Injured
  Someone // No, Someone else was Injured
  No // No Injuries
}

enum MaritalStatus {
  Single
  Married
  Divorced
  Separated
}

enum EmploymentStatus {
  Employed
  Self_Employed
  Student
  Unemployed
}

enum ClaimType {
  Car_Accident
  Workers_Compensation
  Construction_Accident
  Workplace_Accident
  Motorcycle_Accident
  Pedestrian_Accident
  Trucking_Accident
  Bicycle_Accident
  Bus_Accident
  Train_Accident
  Burn_Injury
  MTA_Accident
  Ride_Share_Accident
  Salon_Accident
  Amusement_Park_Accident
  Dog_Bite
  Slip_And_Fall
  Premise_Liability
  Negligence_Security
  Nursing_Home
  Medical_Malpractice
  Aviation_Accident
  Birth_Injury
  Wrongful_Death
}

enum ClaimStatus {
  PENDING_INFORMATION
  UNDER_REVIEW
  PENDING_DOCUMENTS
  INVESTIGATION
  PRE_SUIT
  PRE_LITIGATION
  LITIGATION
  RESOLVED_AND_CLOSED
}

enum Relationship {
  Self
  Parent
  Child
  Sibiling
  Friend
  Representative
  Other
}

enum InjuryPoint {
  Shoulder
  Elbow
  Leg
  Knee
  Hip_Pelvic
  Arm
  Wrist
  Thigh
  Ankle
  Finger
  Toe
  Hand
  Foot
  Other
}

enum InjurySide {
  Left
  Right
  Both
}

enum InjuryType {
  Laceration
  Contusion_Bruises
  Broken
  Fracture
  Tear
  Sprain
}

enum driverOrPassenger {
  Driver
  Passenger
}

enum DefendantRole {
  Operator
  Owner
  Operator_Owner
  Other
}

enum MedCare {
  Medicare
  Medicaid
  Unemployment
  Social_Security_Benefits
}

enum QuestionType {
  TEXT
  NUMBER
  DATE
  YESNO
}

model User {
  id                        String                 @id @default(cuid())
  firstname                 String
  middleName                String?
  lastname                  String
  gender                    String?
  dateOfBirth               DateTime?
  isUnder18                 Boolean                @default(false)
  fatherFirstName           String?
  fatherLastName            String?
  motherFirstName           String?
  motherLastName            String?
  mailingAddress1           String?
  mailingAddress2           String?
  mailingCity               String?
  mailingState              String?
  mailingZipCode            String?
  isPOBoxOrDifferentAddress Boolean                @default(false)
  physicalAddress1          String?
  physicalAddress2          String?
  physicalCity              String?
  physicalState             String?
  physicalZipCode           String?
  email                     String                 @unique
  phone                     String
  phone2                    String?
  fax                       String?
  consentForElectronicComm  Boolean                @default(true)
  maritalStatus             String?
  spouseFirstName           String?
  spouseLastName            String?
  spousePhone               String?
  employmentStatus          String?
  employerName              String?
  employerTitle             String?
  employmentType            String?
  pay                       String?
  schoolName                String?
  expectedGraduationYear    String?
  injured                   WereYouInjured
  claimType                 ClaimType
  emailVerified             DateTime?
  image                     String?
  password                  String
  isTwoFactorEnabled        Boolean                @default(false)
  twoFactorConfirmation     TwoFactorConfirmation?
  ip                        String?
  role                      UserRole               @default(USER)
  claims                    Claim[]
}

model VerificationToken {
  id                      String   @id @default(cuid())
  email                   String
  token                   String   @unique
  expires                 DateTime
  request_email_change_by String?

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Claim {
  id                    String        @id @default(uuid())
  type                  ClaimType?    @map("Claim Type")
  status                ClaimStatus?  @default(PENDING_INFORMATION) @map("Status")
  injured               Boolean?      @map("Were you injured?")
  relationship          Relationship? @map("Relationship")
  otherRelationship     String?       @map("Other Relationship")
  healthInsurance       Boolean?      @map("Do you have health insurance?")
  healthInsuranceNumber String?       @map("Health Insurance Number")
  receiveMedicare       MedCare?      @map("Do you currently receive?")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relationship
  user                    User                     @relation(fields: [userId], references: [id])
  userId                  String
  incident                Incident?
  witness                 Witness?
  client                  Client?
  injuredParty            InjuredParty?
  treatmentAndInjury      TreatmentAndInjury?
  healthInsuranceProvider HealthInsuranceProvider?
  defendant               Defendant?
  questionnaire           Questionnaire?
}

model Questionnaire {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique

  // Relationship
  question QuestionAnswer[]
}

model QuestionAnswer {
  id String @id @default(uuid())

  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @map("Question ID")
  answer     String?  @map("Answer")

  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
}

model Question {
  id        String       @id @default(uuid())
  claimType ClaimType?   @map("Claim Type")
  name      String       @map("Question")
  type      QuestionType @map("Question type")
  choices   String?      @map("Choices")
  enable    Boolean      @default(false) @map("Active")

  QuestionAnswer QuestionAnswer[]
}

model Defendant {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique

  defendantDetails DefendantDetails[]

  @@index([claimId])
}

model DefendantDetails {
  id                      String         @id @default(uuid())
  defendantRole           DefendantRole? @map("Defendant Role")
  insurancePolicyNumber   String?        @map("Defendant Policy Number")
  defendantLocation       String?        @map("Defendant Location")
  vechicleMake            String?        @map("Vehicle Make")
  vechicleModel           String?        @map("Vehicle Model")
  vechicleYear            String?        @map("Vehicle Year")
  vechicleColor           String?        @map("Vehicle Color")
  vechiclePlate           String?        @map("Vehicle Plate Number")
  vechicleRegisteredState String?        @map("Vehicle Registered State")

  defendant   Defendant @relation(fields: [defendantId], references: [id])
  defendantId String
  role        Role      @relation(fields: [roleId], references: [id]) //Role=Defendant and //  Role= Insurance Carrier
  roleId      String

  @@index([defendantId])
}

model HealthInsuranceProvider {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique
  role    Role   @relation(fields: [roleId], references: [id])
  roleId  String
}

model TreatmentAndInjury {
  id       String @id @default(uuid())
  claim    Claim  @relation(fields: [claimId], references: [id])
  claimId  String @unique
  injury   Injury @relation(fields: [injuryId], references: [id])
  injuryId String @unique
}

model Injury {
  id                 String               @id @default(uuid())
  injuryLocation     InjuryPoint          @map("Injury Location")
  injury             InjuryType           @map("Injury")
  injuryLocationSide InjurySide           @map("Injury Location Side")
  treatmentAndInjury TreatmentAndInjury[]
  treatment          Treatment            @relation(fields: [treatmentId], references: [id])
  treatmentId        String
}

model Treatment {
  id            String    @id @default(uuid())
  doctorName    String?   @map("Doctor Name")
  admission     DateTime? @map("Date of Admission")
  discharge     DateTime? @map("Date of Discharge")
  nextScheduled DateTime? @map("Next Scheduled Date")
  injury        Injury[]
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        String
}

model Incident {
  id                        String   @id @default(uuid())
  date                      DateTime @map("Date of Accident")
  time                      DateTime @map("Time of Accident")
  timeOfDay                 String   @map("Accident Time of Day") // "AM" or "PM"
  location                  String?  @map("Incident Location")
  workRelated               Boolean  @map("Were you at work at the time of the accident?")
  description               String?  @map("Description of Accident")
  policeReportCompleted     Boolean  @map("Was a Police Report Filed")
  policeStation             String?  @map("Police Station/Precinct")
  policeOfficer             String?  @map("Officer Name and Description")
  reportCompleted           Boolean  @map("Was an Accident Report or Complaint Report Filed")
  reportNumber              String?  @map("Accident/Complaint Report Number")
  supportingDocument        Boolean  @map("Picture Taken?")//Ask for KB
  supportingDocumentUpload  String?  @map("Upload (if yes)")//Ask for KB
  lostEarning               Boolean  @map("Missed time from work or school?")
  amountLoss                String?  @map("Approximate Loss of Earning")
  timeLoss                  String?  @map("Approximate Missed Time from School? (If in school)")
  priorRepresentation       Boolean  @map("Do you currently have representation regarding this claim?")
  namePriorRepresentation   String?  @map("Name of Attorney (If Yes)") // Reference to Role ID for "Plaintiff Law Firm"
  priorRepresentationReason String?  @map("Reason for wanting to remove your current representation from your claim?")
  Claim                     Claim    @relation(fields: [claimId], references: [id])
  claimId                   String   @unique
}

model Witness {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique

  witnessDetails WitnessDetails[]

  @@index([claimId])
}

model WitnessDetails {
  id        String  @id @default(uuid())
  witness   Witness @relation(fields: [witnessId], references: [id], onDelete: Cascade)
  witnessId String

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@index([witnessId])
}

model Client {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@index([claimId])
}

model InjuredParty {
  id      String @id @default(uuid())
  claim   Claim  @relation(fields: [claimId], references: [id])
  claimId String @unique

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  @@index([claimId])
}

model Role {
  id String @id @default(uuid())

  // Relationship
  account                 Account                   @relation(fields: [accountId], references: [id])
  accountId               String
  roletype                RoleType                  @relation(fields: [roletypeId], references: [id])
  roletypeId              String
  witnessDetails          WitnessDetails[]
  client                  Client[]
  injuredParty            InjuredParty[]
  treatment               Treatment[]
  healthInsuranceProvider HealthInsuranceProvider[]
  defendantDetails        DefendantDetails[]
}

model RoleType {
  id        String   @id @default(uuid())
  roleType  String
  createdAt DateTime @default(now())
  createdBy String?
  enable    Boolean?

  // Relationship
  Role Role[]
}

model Account {
  id                       String  @id @default(uuid())
  firstname                String? @map("First Name")
  lastname                 String? @map("Last Name")
  email                    String? @map("Email Address")
  phone                    String? @map("Phone")
  phone2                   String? @map("Secondary Phone")
  fax                      String? @map("Fax Number")
  mailingAddress           String? @map("Mailing Address Street")
  mailingAddressBuilding   String? @map("Mailing Address Building")
  mailingCity              String? @map("Mailing City")
  mailingState             String? @map("Mailing State")
  mailingZipCode           String? @map("Mailing Zip Code")
  billingAddressStreet     String? @map("Billing Address Street")
  billingAddressBuilding   String? @map("Billing Address Building")
  billingAddressCity       String? @map("Billing Address City")
  billingAddressState      String? @map("Billing Address State")
  billingAddressPostalCode String? @map("Billing Zip Code")

  // Relationship
  Role Role[]
}
